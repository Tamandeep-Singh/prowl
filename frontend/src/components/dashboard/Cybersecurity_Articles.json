{
    "filterTags": ["XSS", "Reverse Shell", "SQL Injection", "IDOR", "Website Vulnerabilities", "Backend", "Databases"],
    "articles": [
        { "slug": "xss-explained", "title": "Cross Site Scripting (XSS) Attacks", "tags":["XSS", "Website Vulnerabilities"], "date_created":"22-04-2025", "content":"XSS content page", "image":"https://www.imperva.com/learn/wp-content/uploads/sites/13/2019/01/sorted-XSS.png"},
        { "slug": "idor-explained", "title": "Insecure Direct Object References (IDOR)", "tags":["IDOR", "Website Vulnerabilities", "Backend"], "date_created":"18-04-2025", "content":"<p>An <strong>IDOR</strong> is an access control vulnerability which allows malicious attackers to gain access to resources in an unauthorised manner. Similar to the article on SQL Injection, this typically occurs when user supplied input allows objects or resources to be accessed directly. It is imperative that proper access control is setup in place to avoid this vulnerability, particularly for <strong>backend servers and Content Delivery Networks (CDNs).</strong></p><p>Assume a website such as '<strong>https://api.example.com/users/fetch?id=227916</strong>' where the parameter '<strong>id</strong>' is used to fetch details for the user or to track state. If proper access control is not implemented, an attacker could simply change the id parameter (e.g increment it) and retrieve details for any user. In a worse case scenario, other crucial actions relying on the ID could be exploited to perform actions that the user may not have intended, leading to catastrophic actions like account takeover, data leaks and more.</p><p>Another example of a potential IDOR is with static file content being served such as '<strong>https://cdn.example.com/files/static_2012.txt</strong>' where the filename is not dynamic and access control is implemented improperly such that restricted files can be accessed if the filename is known. However, not all IDOR attacks take place in URL parameters. In fact, multiple types of IDOR exit where any dependence on resources could be modified by the attacker (e.g body manipulation in HTTP requests or modifying session values like JWT Tokens and Cookies). </p><p>The best course of action to prevent IDOR attacks is to carefully vet for situations where resource identifiers could be misused and <strong>perform user input validation alongside other server checks</strong> to ensure proper access control. Using <strong>unique and unpredicatble identifiers</strong> also helps to prevent attackers from guessing or incrementing known identifiers or parameters.</p>", "image":"https://i.imgur.com/SFM9fNm.png"},
        { "slug": "reverse-shells", "title": "Reverse Shell", "tags":["Reverse Shell"], "date_created":"23-04-2025", "content":"<p>A <strong>Reverse Shell</strong> (also known as a '<strong>remote shell</strong>') allows an attacker to initiate a shell session on the victim's device and gain complete control. The objective of a reverse shell is to connect to the victim's device and redirect the input and outputs of the device's shell so that the attacker can access the device remotely. Reverse Shells are a <strong>severe</strong> type of vulnerability leading to consequences such as data leaks through exfiltration, ransomware attacks, data deletion or injecting further malware. <p>Reverse Shells are normally executed through <strong>Command Injection</strong> vulnerabilities such as <strong>Remote Code Execution (RCE)</strong> where the target machine is exploited to allow specific port numbers or outbound connections to exist thus ignoring firewalls or other security policies set in place. The attacker can then deploy a <strong>payload</strong> which establishes a connection from the target machine to the machine that the attacker controls. Since this connection is outgoing, it therefore prevents security controls which only listen for incoming connections.</p><p>Best practices to avoid the reverse shell vulnerability is to conduct <strong>frequent security audits</strong> through penetration testing and <strong>regularly update systems and software</strong> with the newest patches when available for any known vulnerabilities, particularly for RCE. Other mechanisms and practices like Firewalls, Proper Network Configuration and Employee training can aid in protecting endpoints and resources, especially when some reverse shells are established through social engineering techniques.</p></p>", "image":"https://cdn.invicti.com/statics/img/ogimage/understanding-reverse-shells.jpg"},
        { "slug": "sql-injection", "title": "SQL Injection", "tags":["SQL Injection", "Website Vulnerabilities", "Backend", "Databases"], "date_created":"19-04-2025", "content":"<strong>SQL (Structured Query Language)</strong> is a language used in relational databases to access and manipulate data through the use of SQL statements. Example queries are listed below: <ul><li>SELECT * FROM Users WHERE UserID = 5;</li><li>INSERT INTO Products (ProductName, ProductID) VALUES ('Samsung Monitor', 1);</li><li>DELETE FROM Users WHERE Username = 'John';</li></ul><p>For backend systems that interact with relational databases (NoSQL databases also have the threat of NoSQL injection but that topic will be explored later) it is important to <strong>sanitise input</strong> for SQL statements that depend on user supplied values. The reason for this is that malicious attackers can supply malformed input to the backend so when the SQL statement is generated, it performs an unintended function and in the worst case, gives the attacker complete access to the entire database.</p><p>Imagine a query on the backend server where concatenation is involved such as: <strong>SELECT * FROM Users WHERE UserID = ' + userId';</strong> where userId is provided from the frontend. In this case, <strong>code injection</strong> can occur if input is not properly sanitised or escaped such as <strong>1005 OR 1=1;</strong> being provided which evaluates to true, leading to the entire Users table being dumped. </p><p>Hence, it is necessary to incorporate libraries for <strong>SQL sanitisation and input validation / escaping</strong> so this does not occur under any circumstance. <strong>Parameterised Queries</strong> should also be used to avoid the risk of directly passing in user input.</p>", "image":"https://www.indusface.com/wp-content/uploads/2024/04/sub-internal-How-does-SQL-Injection-Work-1.png"}
    ]
}
