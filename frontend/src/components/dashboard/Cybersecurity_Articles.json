{
    "filterTags": ["XSS", "Reverse Shell", "SQL Injection", "IDOR", "Website Vulnerabilities", "Backend", "Databases"],
    "articles": [
        { "slug": "xss-explained", "title": "Cross Site Scripting (XSS) Attacks", "tags":["XSS", "Website Vulnerabilities"], "date_created":"22-04-2025", "content":"XSS content page", "image":"https://www.imperva.com/learn/wp-content/uploads/sites/13/2019/01/sorted-XSS.png"},
        { "slug": "idor-explained", "title": "Insecure Direct Object References (IDOR)", "tags":["IDOR", "Website Vulnerabilities", "Backend"], "date_created":"18-04-2025", "content":"IDOR content page", "image":"https://i.imgur.com/SFM9fNm.png"},
        { "slug": "reverse-shells", "title": "Reverse Shell", "tags":["Reverse Shell"], "date_created":"23-04-2025", "content":"Reverse Shell content page", "image":"https://cdn.invicti.com/statics/img/ogimage/understanding-reverse-shells.jpg"},
        { "slug": "sql-injection", "title": "SQL Injection", "tags":["SQL Injection", "Website Vulnerabilities", "Backend", "Databases"], "date_created":"19-04-2025", "content":"<strong>SQL (Structured Query Language)</strong> is a language used in relational databases to access and manipulate data through the use of SQL statements. Example queries are listed below: <ul><li>SELECT * FROM Users WHERE UserID = 5;</li><li>INSERT INTO Products (ProductName, ProductID) VALUES ('Samsung Monitor', 1);</li><li>DELETE FROM Users WHERE Username = 'John';</li></ul><p>For backend systems that interact with relational databases (NoSQL databases also have the threat of NoSQL injection but that topic will be explored later) it is important to <strong>sanitise input</strong> for SQL statements that depend on user supplied values. The reason for this is that malicious attackers can supply malformed input to the backend so when the SQL statement is generated, it performs an unintended function and in the worst case, gives the attacker complete access to the entire database.</p><p>Imagine a query on the backend server where concatenation is involved such as: <strong>SELECT * FROM Users WHERE UserID = ' + userId';</strong> where userId is provided from the frontend. In this case, <strong>code injection</strong> can occur if input is not properly sanitised or escaped such as <strong>1005 OR 1=1;</strong> being provided which evaluates to true, leading to the entire Users table being dumped. </p><p>Hence, it is necessary to incorporate libraries for <strong>SQL sanitisation and input validation / escaping</strong> so this does not occur under any circumstance. <strong>Parameterised Queries</strong> should also be used to avoid the risk of directly passing in user input.</p>", "image":"https://www.indusface.com/wp-content/uploads/2024/04/sub-internal-How-does-SQL-Injection-Work-1.png"}
    ]
}
